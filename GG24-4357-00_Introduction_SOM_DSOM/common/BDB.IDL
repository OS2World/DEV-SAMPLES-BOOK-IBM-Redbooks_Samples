/* ******************************************************************** *
 * Copyright International Business Machines Corporation 1993, 1994     *
 * DISCLAIMER OF WARRANTIES.                                            *
 * The following [enclosed] code is sample code created by IBM          *
 * Corporation. This sample code is not part of any standard or IBM     *
 * product and is provided to you solely for the purpose of assisting   *
 * you in the development of your applications.  The code is provided   *
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT  *
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS *
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF   *
 * THIS CODE.  IBM shall not be liable for any damages arising out of   *
 * your use of the sample code, even if they have been advised of the   *
 * possibility of such damages.                                         *
 *                                                                      *
 * DISTRIBUTION.                                                        *
 * This sample code can be freely distributed, copied, altered, and     *
 * incorporated into other software, provided that it bears the above   *
 * Copyright notice and DISCLAIMER intact.                              *
 * -------------------------------------------------------------------- *
 * SOMBank Sample Application                                           *
 *                                                                      *
 * Documented in:                                                       *
 *  IBM International Technical Support Organization Bulletin (Redbook) *
 *  "SOMobjects: A Practical Introduction to SOM and DSOM" (GG24-4357)  *
 * -------------------------------------------------------------------- *
 *                                                                      *
 * FILE       : bdb.idl                                                 *
 *                                                                      *
 * CLASS NAME : BranchDB                                                *
 *                                                                      *
 * DESCRIPTION: BranchDB  represents the DB for a SOMBank branch        *
 *              which contains account information.                     *
 *                                                                      *
 *              This class is an instance of the single instance        *
 *              metaclass so all client processes requiring access      *
 *              to the branch database will access the same instance    *
 *              of the class.                                           *
 *                                                                      *
 *              The methods provided try to mimic SQL calls so that     *
 *              migrating the application to a SQL database can be      *
 *              fairly easy.  Many applications will use an SQL         *
 *              database to gain logging and recovery functions.        *
 * ******************************************************************** *
 */

#ifndef BDB_IDL
#define BDB_IDL

#include <snglicls.idl>  // Def of SOMMSingleInstance Metaclass

interface FileUtility;   // Declaration of FileUtility

interface BranchDB : SOMObject
{
    /*------------------------------*/
    /*     Types and Constants      */
    /*------------------------------*/
                                      //The following structures must
                                      //have TypceCode constants
                                      //generated for them by the
                                      //SOM compiler.

    struct AccountRecord {            // The AccountRecord contains
        long id;                      // information pertaining to
        long owner ;                  // an account.  These records
        long type;                    // are passed to the Fileutility
        double balance ;              // for storage or retrieved from
        double minimumBalance;        // the FileUtility.
        long lastTransactionTime;
    };

    struct FeeRecord {                // The FeeRecord contains
        long id;                      // information pertaining to the
        double fee;                   // a Fee object. These records
        double limit;                 // are passed to the Fileutility
        long count;                   // for storage or retrieved from
    };                                // the FileUtility.

    struct InterestRecord {           // The InterestRecord contains
        long id;                      // information pertaining to an
        double interestRate;          // Interest object. These records
    };                                // are passed to the Fileutility
                                      // for storage or retrieved from
                                      // the FileUtility.

    /*------------------------------*/
    /*          Methods             */
    /*------------------------------*/

    long insertAccount(in AccountRecord anAccount);
    long retrieveAccount(in  long          AccountId,
                         out AccountRecord aRecord);
    long updateAccount(in AccountRecord anAccount);
    long deleteAccount(in long          AccountId);
    long getAvailableId();
    long selectAccountsByCustomerId(in  long aCustomerId,
                                    out long count,
                                    out long arrayOfAccountIds[10]);
    long insertFee(in FeeRecord aFee);
    long retrieveFee(in  long      AccountId,
                     out FeeRecord aRecord);
    long updateFee(in FeeRecord aFee);
    long deleteFee(in long AccountId);
    long insertInterest(in InterestRecord anInterest);
    long retrieveInterest(in  long           AccountId,
                          out InterestRecord aRecord);
    long updateInterest(in InterestRecord anInterest);
    long deleteInterest(in long AccountId);
    /*------------------------------*/
    /*       Implementation         */
    /*------------------------------*/

    #ifdef __SOMIDL__
        implementation
        {
            dllname="bdb.dll";

            metaclass=SOMMSingleInstance ;

            releaseorder: insertAccount,
                          retrieveAccount,
                          updateAccount,
                          deleteAccount,
                          getAvailableId,
                          selectAccountsByCustomerId,
                          insertFee,
                          retrieveFee,
                          updateFee,
                          deleteFee,
                          insertInterest,
                          retrieveInterest,
                          updateInterest,
                          deleteInterest;

            passthru C_ih = "#include \"fileutil.h\""; // passthru to define
                                                       // FileUtily in the
                                                       // implementation file      */

            /*------------------------------*/
            /*      Method Overrides        */
            /*------------------------------*/

            somInit   : override;
            somUninit : override;

            /*------------------------------*/
            /*     Instance Variables       */
            /*------------------------------*/

            FileUtility fp1, fp2, fp3;
            long        lastId;
            any         accountAny, feeAny, interestAny;
        };
    #endif /*__SOMIDL__*/
};
#endif /*BDB_IDL*/

