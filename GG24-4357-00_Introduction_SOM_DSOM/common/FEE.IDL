/* ******************************************************************** *
 * Copyright International Business Machines Corporation 1993, 1994     *
 * DISCLAIMER OF WARRANTIES.                                            *
 * The following [enclosed] code is sample code created by IBM          *
 * Corporation. This sample code is not part of any standard or IBM     *
 * product and is provided to you solely for the purpose of assisting   *
 * you in the development of your applications.  The code is provided   *
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT  *
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS *
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF   *
 * THIS CODE.  IBM shall not be liable for any damages arising out of   *
 * your use of the sample code, even if they have been advised of the   *
 * possibility of such damages.                                         *
 *                                                                      *
 * DISTRIBUTION.                                                        *
 * This sample code can be freely distributed, copied, altered, and     *
 * incorporated into other software, provided that it bears the above   *
 * Copyright notice and DISCLAIMER intact.                              *
 * -------------------------------------------------------------------- *
 * SOMBank Sample Application                                           *
 *                                                                      *
 * Documented in:                                                       *
 *  IBM International Technical Support Organization Bulletin (Redbook) *
 *  "SOMobjects: A Practical Introduction to SOM and DSOM" (GG24-4357)  *
 * -------------------------------------------------------------------- *
 *                                                                      *
 * FILE       : fee.idl                                                 *
 *                                                                      *
 * CLASS NAME : Fee                                                     *
 *                                                                      *
 * DESCRIPTION: The Fee class provides the skeleton of a general Fee    *
 *              object that can contain many levels of fees.  This      *
 *              particular implementation uses just one fee level.      *
 *              A fee is associated with an amount (the fee) and a      *
 *              limit.  The fee amount is applied when the balance      *
 *              drops below the limit.  In principle several            *
 *              fee--limit pairs could be installed.  The instance      *
 *              variable count reflects the number of installed         *
 *              pairs.                                                  *
 *                                                                      *
 *              In a more general implementation, the method            *
 *              setFee() installs additional fee--limit pairs.  The     *
 *              method computeFee() returns the amount of fee that      *
 *              should be applied to the account for the balance        *
 *              specified.  somInit() is overridden to provide          *
 *              default initialization.                                 *
 *                                                                      *
 *              Note that all instance data and methods are public,     *
 *              which ideally they are NOT.  I grant the class          *
 *              (CheckingAccount) direct access to Fee to enable it     *
 *              to put Fee's data into the persistency service.         *
 *              Instead of inheriting the methods needed to do that,    *
 *              I made these two classes "friends".                     *
 * ******************************************************************** *
 */

#ifndef Fee_IDL
#define Fee_IDL
#include <somobj.idl>

interface Fee : SOMObject
{
    /*------------------------------*/
    /*         Attributes           */
    /*------------------------------*/

    attribute double sum, limit;
    attribute long count;

    /*------------------------------*/
    /*          Methods             */
    /*------------------------------*/

    long setFee(in double sum,
                in double limit);
    double computeFee(in double balance);

    /*-------------------------------*/
    /*       Implementation          */
    /*-------------------------------*/

    #ifdef __SOMIDL__
        implementation
        {
            dllname      = "account.dll";

            releaseorder : setFee,
                           computeFee,
                           _get_sum,
                           _set_sum,
                           _get_limit,
                           _set_limit,
                           _get_count,
                           _set_count;

            /*------------------------------*/
            /*      Method Overrides        */
            /*------------------------------*/

            somInit      : override;
        };
    #endif /*__SOMIDL__*/
};
#endif /*Fee_IDL*/
