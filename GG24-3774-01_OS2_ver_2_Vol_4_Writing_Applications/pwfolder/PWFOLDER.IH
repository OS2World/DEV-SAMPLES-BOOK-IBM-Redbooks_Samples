
/*
 * This file was generated by the SOM Compiler.
 * FileName: pwfolder.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef pwfolder_ih
#define pwfolder_ih


#include "pwfolder.ph"

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass PWFolderCClassData.parentMtab
#endif

#define PWFolder_MaxNoMethods 3

/*
 * Instance data
 */
typedef struct {
	CHAR szPassword[20];
	CHAR szCurrentPassword[20];
	CHAR szUserid[20];
} PWFolderData;

/*
 * Instance variable access macros
 */
#define _szPassword (somThis->szPassword)
#define _szCurrentPassword (somThis->szCurrentPassword)
#define _szUserid (somThis->szUserid)

/*
 * Getdata macro
 */
#define PWFolderGetData(somSelf) \
    ((PWFolderData *) \
        SOM_DataResolve(somSelf, PWFolderCClassData.instanceDataToken))

/*
 * Trace/Debug macro
 */
#ifndef PWFolderMethodDebug
#define PWFolderMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef PWFolder_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_PWFolderCClassData.parentMtab
#undef SOMInstance
#define SOMInstance PWFolderCClassData.parentMtab

#ifndef M_PWFolder_Class_Source
#define M_PWFolder_Class_Source
#endif    /* M_PWFolder_Class_Source */

/*
 * Generate the Apply Stubs.
 */
#pragma linkage(somAP_QueryInfo, system)
static BOOL   SOMLINK somAP_QueryInfo(PWFolder *somSelf,
		somId __id,
		somId __desc,
		va_list __ap)
{
	PPWF_INFO pPWFolderInfo = va_arg(__ap, PPWF_INFO);
	__ap; __id; __desc;           /* Referenced to prevent warning msg */

	return (PWFolder_QueryInfo(somSelf,pPWFolderInfo));
}

#pragma linkage(somAP_SetInfo, system)
static BOOL   SOMLINK somAP_SetInfo(PWFolder *somSelf,
		somId __id,
		somId __desc,
		va_list __ap)
{
	PPWF_INFO pPWFolderInfo = va_arg(__ap, PPWF_INFO);
	__ap; __id; __desc;           /* Referenced to prevent warning msg */

	return (PWFolder_SetInfo(somSelf,pPWFolderInfo));
}

#pragma linkage(somAP_LockFolder, system)
static BOOL   SOMLINK somAP_LockFolder(PWFolder *somSelf,
		somId __id,
		somId __desc,
		va_list __ap)
{
	__ap; __id; __desc;           /* Referenced to prevent warning msg */

	return (PWFolder_LockFolder(somSelf));
}


/*
 * Overridden method: wpInitData
 */
#pragma linkage(pwfolder_wpInitData, system)
SOM_Scope void   SOMLINK pwfolder_wpInitData(PWFolder *somSelf);
#ifndef parent_wpInitData
static char *somMN_wpInitData = "wpInitData";
static somId somId_wpInitData = &somMN_wpInitData;
#define parent_wpInitData(somSelf) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpInitData)) \
	 (somSelf))
#endif
#define PWFolderParent_wpInitData parent_wpInitData

/*
 * Overridden method: wpModifyPopupMenu
 */
#pragma linkage(pwfolder_wpModifyPopupMenu, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpModifyPopupMenu(PWFolder *somSelf,
		HWND hwndMenu,
		HWND hwndCnr,
		ULONG iPosition);
#ifndef parent_wpModifyPopupMenu
static char *somMN_wpModifyPopupMenu = "wpModifyPopupMenu";
static somId somId_wpModifyPopupMenu = &somMN_wpModifyPopupMenu;
#define parent_wpModifyPopupMenu(somSelf,hwndMenu,hwndCnr,iPosition) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpModifyPopupMenu)) \
	 (somSelf,hwndMenu,hwndCnr,iPosition))
#endif
#define PWFolderParent_wpModifyPopupMenu parent_wpModifyPopupMenu

/*
 * Overridden method: wpMenuItemSelected
 */
#pragma linkage(pwfolder_wpMenuItemSelected, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpMenuItemSelected(PWFolder *somSelf,
		HWND hwndFrame,
		ULONG ulMenuId);
#ifndef parent_wpMenuItemSelected
static char *somMN_wpMenuItemSelected = "wpMenuItemSelected";
static somId somId_wpMenuItemSelected = &somMN_wpMenuItemSelected;
#define parent_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpMenuItemSelected)) \
	 (somSelf,hwndFrame,ulMenuId))
#endif
#define PWFolderParent_wpMenuItemSelected parent_wpMenuItemSelected

/*
 * Overridden method: wpOpen
 */
#pragma linkage(pwfolder_wpOpen, system)
SOM_Scope HWND   SOMLINK pwfolder_wpOpen(PWFolder *somSelf,
		HWND hwndCnr,
		ULONG ulView,
		ULONG param);
#ifndef parent_wpOpen
static char *somMN_wpOpen = "wpOpen";
static somId somId_wpOpen = &somMN_wpOpen;
#define parent_wpOpen(somSelf,hwndCnr,ulView,param) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpOpen)) \
	 (somSelf,hwndCnr,ulView,param))
#endif
#define PWFolderParent_wpOpen parent_wpOpen

/*
 * Overridden method: wpSetTitle
 */
#pragma linkage(pwfolder_wpSetTitle, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpSetTitle(PWFolder *somSelf,
		PSZ pszNewTitle);
#ifndef parent_wpSetTitle
static char *somMN_wpSetTitle = "wpSetTitle";
static somId somId_wpSetTitle = &somMN_wpSetTitle;
#define parent_wpSetTitle(somSelf,pszNewTitle) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpSetTitle)) \
	 (somSelf,pszNewTitle))
#endif
#define PWFolderParent_wpSetTitle parent_wpSetTitle

/*
 * Overridden method: wpSetup
 */
#pragma linkage(pwfolder_wpSetup, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpSetup(PWFolder *somSelf,
		PSZ pszSetupString);
#ifndef parent_wpSetup
static char *somMN_wpSetup = "wpSetup";
static somId somId_wpSetup = &somMN_wpSetup;
#define parent_wpSetup(somSelf,pszSetupString) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpSetup)) \
	 (somSelf,pszSetupString))
#endif
#define PWFolderParent_wpSetup parent_wpSetup

/*
 * Overridden method: wpSaveState
 */
#pragma linkage(pwfolder_wpSaveState, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpSaveState(PWFolder *somSelf);
#ifndef parent_wpSaveState
static char *somMN_wpSaveState = "wpSaveState";
static somId somId_wpSaveState = &somMN_wpSaveState;
#define parent_wpSaveState(somSelf) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpSaveState)) \
	 (somSelf))
#endif
#define PWFolderParent_wpSaveState parent_wpSaveState

/*
 * Overridden method: wpRestoreState
 */
#pragma linkage(pwfolder_wpRestoreState, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpRestoreState(PWFolder *somSelf,
		ULONG ulReserved);
#ifndef parent_wpRestoreState
static char *somMN_wpRestoreState = "wpRestoreState";
static somId somId_wpRestoreState = &somMN_wpRestoreState;
#define parent_wpRestoreState(somSelf,ulReserved) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpRestoreState)) \
	 (somSelf,ulReserved))
#endif
#define PWFolderParent_wpRestoreState parent_wpRestoreState

/*
 * Overridden method: wpSetIcon
 */
#pragma linkage(pwfolder_wpSetIcon, system)
SOM_Scope BOOL   SOMLINK pwfolder_wpSetIcon(PWFolder *somSelf,
		HPOINTER hptrNewIcon);
#ifndef parent_wpSetIcon
static char *somMN_wpSetIcon = "wpSetIcon";
static somId somId_wpSetIcon = &somMN_wpSetIcon;
#define parent_wpSetIcon(somSelf,hptrNewIcon) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpSetIcon)) \
	 (somSelf,hptrNewIcon))
#endif
#define PWFolderParent_wpSetIcon parent_wpSetIcon

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure PWFoldertempClassData;

/*
 * Initialize the class data structure
 */
struct PWFolderClassDataStructure PWFolderClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct PWFolderCClassDataStructure PWFolderCClassData = {(somMethodTab *) NULL};

/*
 * New Method: QueryInfo
 */
#pragma linkage(pwfolder_QueryInfo, system)
SOM_Scope BOOL   SOMLINK pwfolder_QueryInfo(PWFolder *somSelf,
		PPWF_INFO pPWFolderInfo);
static char *somMN_QueryInfo = "QueryInfo";
static somId somId_QueryInfo = &somMN_QueryInfo;
static char *somDS_QueryInfo = somMD_PWFolder_QueryInfo;
static somId somDI_QueryInfo = &somDS_QueryInfo;
#pragma linkage(somRD_QueryInfo, system)
static BOOL   SOMLINK somRD_QueryInfo(PWFolder *somSelf,
		PPWF_INFO pPWFolderInfo)
{
	return ((BOOL) va_somDispatchL(somSelf, somId_QueryInfo,
		_somGetMethodDescriptor(SOM_GetClass(somSelf),somId_QueryInfo),pPWFolderInfo));
}

/*
 * New Method: SetInfo
 */
#pragma linkage(pwfolder_SetInfo, system)
SOM_Scope BOOL   SOMLINK pwfolder_SetInfo(PWFolder *somSelf,
		PPWF_INFO pPWFolderInfo);
static char *somMN_SetInfo = "SetInfo";
static somId somId_SetInfo = &somMN_SetInfo;
static char *somDS_SetInfo = somMD_PWFolder_SetInfo;
static somId somDI_SetInfo = &somDS_SetInfo;
#pragma linkage(somRD_SetInfo, system)
static BOOL   SOMLINK somRD_SetInfo(PWFolder *somSelf,
		PPWF_INFO pPWFolderInfo)
{
	return ((BOOL) va_somDispatchL(somSelf, somId_SetInfo,
		_somGetMethodDescriptor(SOM_GetClass(somSelf),somId_SetInfo),pPWFolderInfo));
}

/*
 * New Method: LockFolder
 */
#pragma linkage(pwfolder_LockFolder, system)
SOM_Scope BOOL   SOMLINK pwfolder_LockFolder(PWFolder *somSelf);
static char *somMN_LockFolder = "LockFolder";
static somId somId_LockFolder = &somMN_LockFolder;
static char *somDS_LockFolder = somMD_PWFolder_LockFolder;
static somId somDI_LockFolder = &somDS_LockFolder;
#pragma linkage(somRD_LockFolder, system)
static BOOL   SOMLINK somRD_LockFolder(PWFolder *somSelf)
{
	return ((BOOL) va_somDispatchL(somSelf, somId_LockFolder,
		_somGetMethodDescriptor(SOM_GetClass(somSelf),somId_LockFolder)));
}

/*
 * Routines to create the class object
 */

/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t PWFolderSM[] = {
    {    &PWFolderClassData.QueryInfo,
         &somId_QueryInfo,
         &somDI_QueryInfo,
         (somMethodProc *) pwfolder_QueryInfo,
         (somMethodProc *) somRD_QueryInfo,
         (somMethodProc *) somAP_QueryInfo    },
    {    &PWFolderClassData.SetInfo,
         &somId_SetInfo,
         &somDI_SetInfo,
         (somMethodProc *) pwfolder_SetInfo,
         (somMethodProc *) somRD_SetInfo,
         (somMethodProc *) somAP_SetInfo    },
    {    &PWFolderClassData.LockFolder,
         &somId_LockFolder,
         &somDI_LockFolder,
         (somMethodProc *) pwfolder_LockFolder,
         (somMethodProc *) somRD_LockFolder,
         (somMethodProc *) somAP_LockFolder    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t PWFolderOM[] = {
    {    &somId_wpInitData,
         (somMethodProc *) pwfolder_wpInitData    },
    {    &somId_wpModifyPopupMenu,
         (somMethodProc *) pwfolder_wpModifyPopupMenu    },
    {    &somId_wpMenuItemSelected,
         (somMethodProc *) pwfolder_wpMenuItemSelected    },
    {    &somId_wpOpen,
         (somMethodProc *) pwfolder_wpOpen    },
    {    &somId_wpSetTitle,
         (somMethodProc *) pwfolder_wpSetTitle    },
    {    &somId_wpSetup,
         (somMethodProc *) pwfolder_wpSetup    },
    {    &somId_wpSaveState,
         (somMethodProc *) pwfolder_wpSaveState    },
    {    &somId_wpRestoreState,
         (somMethodProc *) pwfolder_wpRestoreState    },
    {    &somId_wpSetIcon,
         (somMethodProc *) pwfolder_wpSetIcon    },
};

static void PWFoldersomInitializeClass ()
{
	int i;
	somStaticMethod_t *smp;
	somOverrideMethod_t *omp;

/*
 * Add the Static Methods.
 */
	for (smp = PWFolderSM, i = 0; i < 3; smp++, i++)
	    *(smp->classData) =
	        _somAddStaticMethod (PWFoldertempClassData.classObject,
	            *(smp->methodId), *(smp->methodDescriptor),
	            smp->method, smp->redispatchStub,
	            smp->applyStub);


/*
 * Override methods.
 */
	for (omp = PWFolderOM, i = 0; i < 9; omp++, i++)
	    _somOverrideSMethod (PWFoldertempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(PWFoldersomCreateClass, system)
static void SOMLINK PWFoldersomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    PWFoldertempClassData.classObject = _somNew (mClsObj);
    _somInitClass (PWFoldertempClassData.classObject,
		"PWFolder",
		pClsObj,
		sizeof(PWFolderData),
		PWFolder_MaxNoMethods,
		PWFolder_MajorVersion,
		PWFolder_MinorVersion);
    PWFolderCClassData.instanceDataToken = 
	_somGetInstanceToken(PWFoldertempClassData.classObject);
    PWFoldersomInitializeClass();
    PWFolderCClassData.parentMtab =
	_somGetPClsMtab(PWFoldertempClassData.classObject);
    _somSetClassData(PWFoldertempClassData.classObject, (somClassDataStructure *)&PWFolderClassData);
    _somClassReady(PWFoldertempClassData.classObject);
    /* make newly created class object visible */
    PWFolderClassData.classObject = PWFoldertempClassData.classObject;
}

PWFolder * SOMLINK PWFolderNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != PWFolder_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > PWFolder_MinorVersion))) {
	somPrintf("PWFolderNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (PWFolderClassData.classObject != (SOMAny *) NULL)
	return(PWFolderClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    WPFolderNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("WPFolder"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Explicit metaclass, so get it */ 
    M_PWFolderNewClass(0,0);	/* static reference */
    mClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_PWFolder"), 0, 0);
    if (mClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoMetaClass);

    somConstructClass(PWFoldersomCreateClass, pClsObj, mClsObj,
		     &PWFoldertempClassData);
    return (PWFolderClassData.classObject);
}

#endif                   /* PWFolder_Class_Source */

#endif       /* pwfolder_ih */

/*
 * This file was generated by the SOM Compiler.
 * FileName: pwfolder.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef pwfolder_mih
#define pwfolder_mih


/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass M_PWFolderCClassData.parentMtab
#endif

#define M_PWFolder_MaxNoMethods 0

/*
 * Instance data
 */
typedef void M_PWFolderData;

/*
 * Trace/Debug macro
 */
#ifndef M_PWFolderMethodDebug
#define M_PWFolderMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef M_PWFolder_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpclsQueryTitle
 */
#pragma linkage(pwfoldercls_wpclsQueryTitle, system)
SOM_Scope PSZ   SOMLINK pwfoldercls_wpclsQueryTitle(M_PWFolder *somSelf);
#ifndef parent_wpclsQueryTitle
static char *somMN_wpclsQueryTitle = "wpclsQueryTitle";
static somId somId_wpclsQueryTitle = &somMN_wpclsQueryTitle;
#define parent_wpclsQueryTitle(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsQueryTitle)) \
	 (somSelf))
#endif
#define M_PWFolderParent_wpclsQueryTitle parent_wpclsQueryTitle

/*
 * Overridden method: wpclsInitData
 */
#pragma linkage(pwfoldercls_wpclsInitData, system)
SOM_Scope void   SOMLINK pwfoldercls_wpclsInitData(M_PWFolder *somSelf);
#ifndef parent_wpclsInitData
static char *somMN_wpclsInitData = "wpclsInitData";
static somId somId_wpclsInitData = &somMN_wpclsInitData;
#define parent_wpclsInitData(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsInitData)) \
	 (somSelf))
#endif
#define M_PWFolderParent_wpclsInitData parent_wpclsInitData

/*
 * Overridden method: wpclsQueryIcon
 */
#pragma linkage(pwfoldercls_wpclsQueryIcon, system)
SOM_Scope HPOINTER   SOMLINK pwfoldercls_wpclsQueryIcon(M_PWFolder *somSelf);
#ifndef parent_wpclsQueryIcon
static char *somMN_wpclsQueryIcon = "wpclsQueryIcon";
static somId somId_wpclsQueryIcon = &somMN_wpclsQueryIcon;
#define parent_wpclsQueryIcon(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsQueryIcon)) \
	 (somSelf))
#endif
#define M_PWFolderParent_wpclsQueryIcon parent_wpclsQueryIcon

/*
 * Overridden method: wpclsUnInitData
 */
#pragma linkage(pwfoldercls_wpclsUnInitData, system)
SOM_Scope void   SOMLINK pwfoldercls_wpclsUnInitData(M_PWFolder *somSelf);
#ifndef parent_wpclsUnInitData
static char *somMN_wpclsUnInitData = "wpclsUnInitData";
static somId somId_wpclsUnInitData = &somMN_wpclsUnInitData;
#define parent_wpclsUnInitData(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsUnInitData)) \
	 (somSelf))
#endif
#define M_PWFolderParent_wpclsUnInitData parent_wpclsUnInitData

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure M_PWFoldertempClassData;

/*
 * Initialize the class data structure
 */
struct M_PWFolderClassDataStructure M_PWFolderClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct M_PWFolderCClassDataStructure M_PWFolderCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_PWFolderOM[] = {
    {    &somId_wpclsQueryTitle,
         (somMethodProc *) pwfoldercls_wpclsQueryTitle    },
    {    &somId_wpclsInitData,
         (somMethodProc *) pwfoldercls_wpclsInitData    },
    {    &somId_wpclsQueryIcon,
         (somMethodProc *) pwfoldercls_wpclsQueryIcon    },
    {    &somId_wpclsUnInitData,
         (somMethodProc *) pwfoldercls_wpclsUnInitData    },
};

static void M_PWFoldersomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = M_PWFolderOM, i = 0; i < 4; omp++, i++)
	    _somOverrideSMethod (M_PWFoldertempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(M_PWFoldersomCreateClass, system)
static void SOMLINK M_PWFoldersomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    M_PWFoldertempClassData.classObject = _somNew (mClsObj);
    _somInitClass (M_PWFoldertempClassData.classObject,
		"M_PWFolder",
		pClsObj,
		0,
		M_PWFolder_MaxNoMethods,
		M_PWFolder_MajorVersion,
		M_PWFolder_MinorVersion);
    M_PWFolderCClassData.instanceDataToken = 
	_somGetInstanceToken(M_PWFoldertempClassData.classObject);
    M_PWFoldersomInitializeClass();
    M_PWFolderCClassData.parentMtab =
	_somGetPClsMtab(M_PWFoldertempClassData.classObject);
    _somSetClassData(M_PWFoldertempClassData.classObject, (somClassDataStructure *)&M_PWFolderClassData);
    _somClassReady(M_PWFoldertempClassData.classObject);
    /* make newly created class object visible */
    M_PWFolderClassData.classObject = M_PWFoldertempClassData.classObject;
}

M_PWFolder * SOMLINK M_PWFolderNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != M_PWFolder_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > M_PWFolder_MinorVersion))) {
	somPrintf("M_PWFolderNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (M_PWFolderClassData.classObject != (SOMAny *) NULL)
	return(M_PWFolderClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    M_WPFolderNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_WPFolder"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Use parent's metaclass */ 
    mClsObj = SOM_GetClass(pClsObj);

    somConstructClass(M_PWFoldersomCreateClass, pClsObj, mClsObj,
		     &M_PWFoldertempClassData);
    return (M_PWFolderClassData.classObject);
}

#endif                   /* M_PWFolder_Class_Source */

#endif       /* pwfolder_ih */
