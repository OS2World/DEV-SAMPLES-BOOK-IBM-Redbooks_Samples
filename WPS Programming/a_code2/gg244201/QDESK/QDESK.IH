
/*
 * This file was generated by the SOM Compiler.
 * FileName: qdesk.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef qdesk_ih
#define qdesk_ih


#include "qdesk.h"

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass GEQueryDesktopCClassData.parentMtab
#endif

#define GEQueryDesktop_MaxNoMethods 0

/*
 * Instance data
 */
typedef struct {
	PVOID pDummy;
} GEQueryDesktopData;

/*
 * Instance variable access macros
 */
#define _pDummy (somThis->pDummy)

/*
 * Getdata macro
 */
#define GEQueryDesktopGetData(somSelf) \
    ((GEQueryDesktopData *) \
        SOM_DataResolve(somSelf, GEQueryDesktopCClassData.instanceDataToken))

/*
 * Trace/Debug macro
 */
#ifndef GEQueryDesktopMethodDebug
#define GEQueryDesktopMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef GEQueryDesktop_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_GEQueryDesktopCClassData.parentMtab
#undef SOMInstance
#define SOMInstance GEQueryDesktopCClassData.parentMtab

#ifndef M_GEQueryDesktop_Class_Source
#define M_GEQueryDesktop_Class_Source
#endif    /* M_GEQueryDesktop_Class_Source */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpSetup
 */
#pragma linkage(qt_wpSetup, system)
SOM_Scope BOOL   SOMLINK qt_wpSetup(GEQueryDesktop *somSelf,
		PSZ pszSetupString);
#ifndef parent_wpSetup
static char *somMN_wpSetup = "wpSetup";
static somId somId_wpSetup = &somMN_wpSetup;
#define parent_wpSetup(somSelf,pszSetupString) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpSetup)) \
	 (somSelf,pszSetupString))
#endif
#define GEQueryDesktopParent_wpSetup parent_wpSetup

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure GEQueryDesktoptempClassData;

/*
 * Initialize the class data structure
 */
struct GEQueryDesktopClassDataStructure GEQueryDesktopClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct GEQueryDesktopCClassDataStructure GEQueryDesktopCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t GEQueryDesktopOM[] = {
    {    &somId_wpSetup,
         (somMethodProc *) qt_wpSetup    },
};

static void GEQueryDesktopsomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = GEQueryDesktopOM, i = 0; i < 1; omp++, i++)
	    _somOverrideSMethod (GEQueryDesktoptempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(GEQueryDesktopsomCreateClass, system)
static void SOMLINK GEQueryDesktopsomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    GEQueryDesktoptempClassData.classObject = _somNew (mClsObj);
    _somInitClass (GEQueryDesktoptempClassData.classObject,
		"GEQueryDesktop",
		pClsObj,
		sizeof(GEQueryDesktopData),
		GEQueryDesktop_MaxNoMethods,
		GEQueryDesktop_MajorVersion,
		GEQueryDesktop_MinorVersion);
    GEQueryDesktopCClassData.instanceDataToken = 
	_somGetInstanceToken(GEQueryDesktoptempClassData.classObject);
    GEQueryDesktopsomInitializeClass();
    GEQueryDesktopCClassData.parentMtab =
	_somGetPClsMtab(GEQueryDesktoptempClassData.classObject);
    _somSetClassData(GEQueryDesktoptempClassData.classObject, (somClassDataStructure *)&GEQueryDesktopClassData);
    _somClassReady(GEQueryDesktoptempClassData.classObject);
    /* make newly created class object visible */
    GEQueryDesktopClassData.classObject = GEQueryDesktoptempClassData.classObject;
}

GEQueryDesktop * SOMLINK GEQueryDesktopNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != GEQueryDesktop_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > GEQueryDesktop_MinorVersion))) {
	somPrintf("GEQueryDesktopNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (GEQueryDesktopClassData.classObject != (SOMAny *) NULL)
	return(GEQueryDesktopClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    WPTransientNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("WPTransient"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Explicit metaclass, so get it */ 
    M_GEQueryDesktopNewClass(0,0);	/* static reference */
    mClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_GEQueryDesktop"), 0, 0);
    if (mClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoMetaClass);

    somConstructClass(GEQueryDesktopsomCreateClass, pClsObj, mClsObj,
		     &GEQueryDesktoptempClassData);
    return (GEQueryDesktopClassData.classObject);
}

#endif                   /* GEQueryDesktop_Class_Source */

#endif       /* qdesk_ih */

/*
 * This file was generated by the SOM Compiler.
 * FileName: qdesk.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef qdesk_mih
#define qdesk_mih


/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass M_GEQueryDesktopCClassData.parentMtab
#endif

#define M_GEQueryDesktop_MaxNoMethods 0

/*
 * Instance data
 */
typedef void M_GEQueryDesktopData;

/*
 * Trace/Debug macro
 */
#ifndef M_GEQueryDesktopMethodDebug
#define M_GEQueryDesktopMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef M_GEQueryDesktop_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpclsQueryStyle
 */
#pragma linkage(qtM_wpclsQueryStyle, system)
SOM_Scope ULONG   SOMLINK qtM_wpclsQueryStyle(M_GEQueryDesktop *somSelf);
#ifndef parent_wpclsQueryStyle
static char *somMN_wpclsQueryStyle = "wpclsQueryStyle";
static somId somId_wpclsQueryStyle = &somMN_wpclsQueryStyle;
#define parent_wpclsQueryStyle(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsQueryStyle)) \
	 (somSelf))
#endif
#define M_GEQueryDesktopParent_wpclsQueryStyle parent_wpclsQueryStyle

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure M_GEQueryDesktoptempClassData;

/*
 * Initialize the class data structure
 */
struct M_GEQueryDesktopClassDataStructure M_GEQueryDesktopClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct M_GEQueryDesktopCClassDataStructure M_GEQueryDesktopCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_GEQueryDesktopOM[] = {
    {    &somId_wpclsQueryStyle,
         (somMethodProc *) qtM_wpclsQueryStyle    },
};

static void M_GEQueryDesktopsomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = M_GEQueryDesktopOM, i = 0; i < 1; omp++, i++)
	    _somOverrideSMethod (M_GEQueryDesktoptempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(M_GEQueryDesktopsomCreateClass, system)
static void SOMLINK M_GEQueryDesktopsomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    M_GEQueryDesktoptempClassData.classObject = _somNew (mClsObj);
    _somInitClass (M_GEQueryDesktoptempClassData.classObject,
		"M_GEQueryDesktop",
		pClsObj,
		0,
		M_GEQueryDesktop_MaxNoMethods,
		M_GEQueryDesktop_MajorVersion,
		M_GEQueryDesktop_MinorVersion);
    M_GEQueryDesktopCClassData.instanceDataToken = 
	_somGetInstanceToken(M_GEQueryDesktoptempClassData.classObject);
    M_GEQueryDesktopsomInitializeClass();
    M_GEQueryDesktopCClassData.parentMtab =
	_somGetPClsMtab(M_GEQueryDesktoptempClassData.classObject);
    _somSetClassData(M_GEQueryDesktoptempClassData.classObject, (somClassDataStructure *)&M_GEQueryDesktopClassData);
    _somClassReady(M_GEQueryDesktoptempClassData.classObject);
    /* make newly created class object visible */
    M_GEQueryDesktopClassData.classObject = M_GEQueryDesktoptempClassData.classObject;
}

M_GEQueryDesktop * SOMLINK M_GEQueryDesktopNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != M_GEQueryDesktop_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > M_GEQueryDesktop_MinorVersion))) {
	somPrintf("M_GEQueryDesktopNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (M_GEQueryDesktopClassData.classObject != (SOMAny *) NULL)
	return(M_GEQueryDesktopClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    M_WPTransientNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_WPTransient"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Use parent's metaclass */ 
    mClsObj = SOM_GetClass(pClsObj);

    somConstructClass(M_GEQueryDesktopsomCreateClass, pClsObj, mClsObj,
		     &M_GEQueryDesktoptempClassData);
    return (M_GEQueryDesktopClassData.classObject);
}

#endif                   /* M_GEQueryDesktop_Class_Source */

#endif       /* qdesk_ih */
